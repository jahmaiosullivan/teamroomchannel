@using HobbyClue.Web.Areas.Admin.Models; 
@model IEnumerable<SidebarMenuItem>
<div class="page-sidebar-wrapper">
    <div class="page-sidebar navbar-collapse collapse">
         <!-- DOC: Apply "page-sidebar-menu-light" class right after "page-sidebar-menu" to enable light sidebar menu style(without borders) -->
        <!-- DOC: Apply "page-sidebar-menu-hover-submenu" class right after "page-sidebar-menu" to enable hoverable(hover vs accordion) sub menu mode -->
        <!-- DOC: Apply "page-sidebar-menu-closed" class right after "page-sidebar-menu" to collapse("page-sidebar-closed" class must be applied to the body element) the sidebar sub menu mode -->
        <!-- DOC: Set data-auto-scroll="false" to disable the sidebar from auto scrolling/focusing -->
        <!-- DOC: Set data-keep-expand="true" to keep the submenues expanded -->
        <!-- DOC: Set data-auto-speed="200" to adjust the sub menu slide up/down speed -->
        <ul class="page-sidebar-menu" data-keep-expanded="true" data-auto-scroll="false" data-slide-speed="200">
            @foreach (var menu in Model)
            {
                if (menu.IsHeading)
                {
                    <li class="heading">
                        <h3 class="uppercase">@menu.Title</h3>
                    </li>
                    foreach (var child in menu.Children)
                    {
                        @TopLevelMenu(child)
                    }
                }
                else
                {
                    @TopLevelMenu(menu)
                }
            }
        </ul>
    </div>
</div>

@helper TopLevelMenu(SidebarMenuItem menuItem)
{
    <li class="@string.Format("{0}", menuItem.IsOpen ? "open " : "")@string.Format("{0}", menuItem.IsFirst ? "start " : "")@string.Format("{0}", menuItem.IsSelected ? "active" : "")">
        <a href="@menuItem.Url">
            @if (!string.IsNullOrEmpty(menuItem.Icon))
            {
                <i class="@string.Format("icon-{0}", menuItem.Icon)"></i>
            }
            @menuItem.Title
            @if (!string.IsNullOrEmpty(menuItem.BadgeText))
            {
                <span class="badge badge-roundless badge-primary">@menuItem.BadgeText</span>
            }
            @if (menuItem.IsSelected)
            {
                <span class="selected"></span>
            }
            @if (menuItem.Children.Any())
            {
                <span class="arrow @string.Format("{0}", menuItem.IsOpen ? "open " : "")"></span>
            }
        </a>
                @if (menuItem.Children.Any())
        {
                <ul class="sub-menu" style="@string.Format("{0}", menuItem.IsOpen ? "display:block; " : "")">
                    @foreach (var child in menuItem.Children)
                    {
                        @TopLevelMenu(child)
                    }
                </ul>
        }
    </li>
}